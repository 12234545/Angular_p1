// cours.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { ChatbotComponent } from '../chatbot/chatbot.component';
import { NavbarComponent } from "../navbar/navbar.component";

import { Router } from '@angular/router';

interface CourseModule {
  id: number;
  title: string;
  duration: string;
  completed: boolean;
  lessons: Lesson[];
}

interface Lesson {
  id: number;
  title: string;
  duration: string;
  completed: boolean;
  type: 'video' | 'text' | 'quiz';
}

interface ForumPost {
  id: number;
  title: string;
  author: string;
  replies: number;
  lastActivity: string;
  category: string;
}

interface BlogPost {
  id: number;
  title: string;
  author: string;
  date: string;
  excerpt: string;
  readTime: string;
}

interface Poll {
  id: number;
  question: string;
  options: {option: string, votes: number}[];
  totalVotes: number;
  isActive: boolean;
}

interface Reference {
  id: number;
  title: string;
  type: 'pdf' | 'link' | 'video';
  url: string;
  description: string;
}

interface Announcement {
  id: number;
  title: string;
  content: string;
  date: string;
  priority: 'low' | 'medium' | 'high';
}

interface Opportunity {
  id: number;
  title: string;
  company: string;
  type: 'job' | 'internship' | 'freelance';
  location: string;
  deadline: string;
}

interface Course {
  id: number;
  title: string;
  description: string;
  image: string;
  price: number;
  originalPrice: number;
  discount: number;
  rating: number;
  studentsCount: number;
  duration: string;
  level: string;
  instructor: {
    name: string;
    image: string;
    bio: string;
  };
  modules: CourseModule[];
  whatYouLearn: string[];
  requirements: string[];
  about: string;
}

@Component({
  selector: 'app-cours',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule, ChatbotComponent, NavbarComponent ],
  templateUrl: './cours.component.html',
  styleUrls: ['./cours.component.scss']
})
export class CoursComponent implements OnInit {
  course: Course = {
    id: 1,
    title: 'React de A √† Z (Hooks, Redux, Contexte inclus)',
    description: 'Apprenez le framework JavaScript le plus populaire. Cr√©ez des applications web compl√®tes.',
    image: 'pictures/course-1.png',
    price: 49.95,
    originalPrice: 99.99,
    discount: 50,
    rating: 4.8,
    studentsCount: 1234,
    duration: '40 heures',
    level: 'D√©butant',
    instructor: {
      name: 'John Doe',
      image: 'pictures/M1.jpg',
      bio: 'Expert React avec 8 ans d\'exp√©rience dans le d√©veloppement web'
    },
    modules: [
      {
        id: 1,
        title: 'Introduction',
        duration: '2h 30min',
        completed: true,
        lessons: [
          { id: 1, title: 'Introduction', duration: '5min', completed: true, type: 'video' },
          { id: 2, title: 'Qu\'est-ce que React?', duration: '10min', completed: true, type: 'video' },
          { id: 3, title: 'Configuration de l\'environnement', duration: '15min', completed: true, type: 'video' }
        ]
      },
      {
        id: 2,
        title: 'Rappel JavaScript',
        duration: '3h 15min',
        completed: false,
        lessons: [
          { id: 4, title: 'Variables et types', duration: '20min', completed: false, type: 'video' },
          { id: 5, title: 'Fonctions et port√©e', duration: '25min', completed: false, type: 'video' },
          { id: 6, title: 'Objets et tableaux', duration: '30min', completed: false, type: 'video' }
        ]
      },
      {
        id: 3,
        title: 'Cr√©er votre premier React',
        duration: '4h 20min',
        completed: false,
        lessons: [
          { id: 7, title: 'JSX et composants', duration: '45min', completed: false, type: 'video' },
          { id: 8, title: 'Props et state', duration: '60min', completed: false, type: 'video' },
          { id: 9, title: 'Gestion des √©v√©nements', duration: '35min', completed: false, type: 'video' }
        ]
      }
    ],
    whatYouLearn: [
      'Bases fondamentales de React',
      'Utiliser les Context API',
      'Cr√©er et g√©rer ses blogs React',
      'Cr√©er des applications web modernes',
      'Ma√Ætriser les Hooks React',
      'State et props',
      'G√©rer l\'√©tat avec Redux',
      'Tests unitaires avec Jest et React Testing Library',
      'D√©ploiement d\'applications React'
    ],
    requirements: [
      'Connaissances de base en HTML, CSS et JavaScript',
      'Un ordinateur avec un navigateur web moderne',
      'Motivation pour apprendre React'
    ],
    about: 'React est une biblioth√®que JavaScript populaire pour construire des interfaces utilisateur interactives. Ce cours vous apprendra tout ce que vous devez savoir sur React, des concepts de base aux techniques avanc√©es. Vous apprendrez √† cr√©er des composants r√©utilisables, √† g√©rer l\'√©tat de l\'application, et √† construire des applications web modernes et performantes.'
  };

  activeTab: 'about' | 'content' | 'overview' | 'community' = 'about';
  communityTab: 'forum' | 'blog' | 'polls' | 'references' | 'announcements' | 'opportunities' = 'forum';
  expandedModules: Set<number> = new Set();

  // Donn√©es pour la communaut√©
  forumPosts: ForumPost[] = [
    { id: 1, title: 'Comment optimiser les performances React?', author: 'Marie Dubois', replies: 12, lastActivity: '2 heures', category: 'Questions' },
    { id: 2, title: 'Partage de projet: App de gestion de t√¢ches', author: 'Pierre Martin', replies: 8, lastActivity: '1 jour', category: 'Projets' },
    { id: 3, title: 'Probl√®me avec useEffect', author: 'Sophie Leroy', replies: 5, lastActivity: '3 heures', category: 'Aide' }
  ];

  blogPosts: BlogPost[] = [
    { id: 1, title: 'Les nouvelles fonctionnalit√©s de React 18', author: 'John Doe', date: '2024-01-15', excerpt: 'D√©couvrez les am√©liorations apport√©es par React 18...', readTime: '5 min' },
    { id: 2, title: 'Bonnes pratiques pour les hooks', author: 'Jane Smith', date: '2024-01-10', excerpt: 'Apprenez √† utiliser les hooks de mani√®re optimale...', readTime: '8 min' }
  ];

  polls: Poll[] = [
    {
      id: 1,
      question: 'Quel framework pr√©f√©rez-vous avec React?',
      options: [
        { option: 'Next.js', votes: 45 },
        { option: 'Gatsby', votes: 20 },
        { option: 'Create React App', votes: 35 }
      ],
      totalVotes: 100,
      isActive: true
    }
  ];

  references: Reference[] = [
    { id: 1, title: 'Documentation officielle React', type: 'link', url: 'https://reactjs.org', description: 'Documentation compl√®te de React' },
    { id: 2, title: 'Guide des hooks avanc√©s', type: 'pdf', url: '/resources/hooks-guide.pdf', description: 'Guide d√©taill√© des hooks React' },
    { id: 3, title: 'Tutoriel vid√©o: √âtat global', type: 'video', url: '/videos/global-state.mp4', description: 'Gestion de l\'√©tat global avec Context API' }
  ];

  announcements: Announcement[] = [
    { id: 1, title: 'Nouvelle section sur les tests', content: 'Nous avons ajout√© une nouvelle section d√©di√©e aux tests unitaires.', date: '2024-01-20', priority: 'high' },
    { id: 2, title: 'Webinaire en direct le 25 janvier', content: 'Rejoignez-nous pour un webinaire sur les meilleures pratiques React.', date: '2024-01-18', priority: 'medium' }
  ];

  opportunities: Opportunity[] = [
    { id: 1, title: 'D√©veloppeur React Junior', company: 'Tech Solutions', type: 'job', location: 'Paris', deadline: '2024-02-15' },
    { id: 2, title: 'Stage d√©veloppement Frontend', company: 'StartupX', type: 'internship', location: 'Lyon', deadline: '2024-02-20' }
  ];

  // Variables pour les formulaires
  newPost = { title: '', content: '', category: 'Questions' };
  newComment = '';
  selectedPoll = '';

  constructor(private route: ActivatedRoute,private router: Router) {}

  ngOnInit() {
    // Scroll vers le haut au chargement du composant
    window.scrollTo(0, 0);

    // R√©cup√©rer l'ID du cours depuis les param√®tres de route
    this.route.params.subscribe(params => {
      const courseId = params['id'];
      if (courseId) {
        // Charger les donn√©es du cours sp√©cifique
        this.loadCourse(courseId);
      }
    });
  }
  startCourse(): void {
  // Rediriger vers la page de paiement avec l'ID du cours
  this.router.navigate(['/paiement', this.course.id]);
}

  private loadCourse(courseId: string) {
    // Logique pour charger les donn√©es du cours sp√©cifique
    // Pour l'instant, nous utilisons les donn√©es hardcod√©es
    console.log('Chargement du cours ID:', courseId);
  }

  setActiveTab(tab: 'about' | 'content' | 'overview' | 'community') {
    this.activeTab = tab;
  }

  setCommunityTab(tab: 'forum' | 'blog' | 'polls' | 'references' | 'announcements' | 'opportunities') {
    this.communityTab = tab;
  }

  toggleModule(moduleId: number) {
    if (this.expandedModules.has(moduleId)) {
      this.expandedModules.delete(moduleId);
    } else {
      this.expandedModules.add(moduleId);
    }
  }

  isModuleExpanded(moduleId: number): boolean {
    return this.expandedModules.has(moduleId);
  }

  getCompletionPercentage(): number {
    const totalLessons = this.course.modules.reduce((total, module) => total + module.lessons.length, 0);
    const completedLessons = this.course.modules.reduce((total, module) =>
      total + module.lessons.filter(lesson => lesson.completed).length, 0);
    return Math.round((completedLessons / totalLessons) * 100);
  }

  getLessonIcon(type: string): string {
    switch (type) {
      case 'video': return '‚ñ∂Ô∏è';
      case 'text': return 'üìÑ';
      case 'quiz': return '‚ùì';
      default: return 'üìö';
    }
  }

  getTotalLessons(): number {
    return this.course.modules.reduce((total, module) => total + module.lessons.length, 0);
  }

  getTotalDuration(): string {
    // Pour cet exemple, on retourne une dur√©e fixe
    // En pratique, vous calculeriez la dur√©e totale √† partir des modules
    return '40h 30min';
  }

  // M√©thodes pour la communaut√©
  createForumPost() {
    if (this.newPost.title && this.newPost.content) {
      const post: ForumPost = {
        id: this.forumPosts.length + 1,
        title: this.newPost.title,
        author: 'Vous',
        replies: 0,
        lastActivity: 'Maintenant',
        category: this.newPost.category
      };
      this.forumPosts.unshift(post);
      this.newPost = { title: '', content: '', category: 'Questions' };
    }
  }

  voteInPoll(pollId: number, optionIndex: number) {
    const poll = this.polls.find(p => p.id === pollId);
    if (poll) {
      poll.options[optionIndex].votes++;
      poll.totalVotes++;
    }
  }

  getReferenceIcon(type: string): string {
    switch (type) {
      case 'pdf': return 'üìÑ';
      case 'link': return 'üîó';
      case 'video': return 'üìπ';
      default: return 'üìö';
    }
  }

  getPriorityIcon(priority: string): string {
    switch (priority) {
      case 'high': return 'üî¥';
      case 'medium': return 'üü°';
      case 'low': return 'üü¢';
      default: return 'üîµ';
    }
  }

  getOpportunityIcon(type: string): string {
    switch (type) {
      case 'job': return 'üíº';
      case 'internship': return 'üéì';
      case 'freelance': return 'üíª';
      default: return 'üöÄ';
    }
  }
}
